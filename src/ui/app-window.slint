import { Button } from "std-widgets.slint";
import { GroupBox , SpinBox } from "std-widgets.slint";


export component CameraCalculatorUI inherits Window {
    in-out property<int> focal_length;
    in-out property<float> sensor_width;
    in-out property<float> image_width;
    in-out property<float> distance_to_target;

    in-out property<float> fov;              // Degrees
    in-out property<float> distance_m;       // Meters
    in-out property<float> ppm;              // Pixels per meter

    property<float> scale_factor: 40; // Pixels per meter (for rendering)

    // Derived coordinates
    property<float> origin_x: root.width / 1px / 2;
    property<float> origin_y: root.height / 1px - 10;
    property<float> fov_rad: root.fov * 3.14159 / 180;
    property<float> half_fov_rad: root.fov_rad / 2;
    property<float> dist_px: root.distance_m * root.scale_factor;
    property<float> left_x: root.origin_x - root.dist_px * tan(half_fov_rad * 1deg);
    property<float> right_x: root.origin_x - root.dist_px * tan(half_fov_rad * 1deg);
    property<float> target_y: root.origin_y - root.dist_px;

    callback calculate();

    VerticalLayout {
        spacing: 16px;

        Text {
            text: "Camera PPM Calculator";
            font-size: 24px;
            horizontal-alignment: center;
        }

        GroupBox {
            title: "Input Parameters";
            VerticalLayout {
                spacing: 8px;

                HorizontalLayout {
                    Text { text: "Focal Length (mm):" ;}
                    SpinBox { value <=> root.focal_length; minimum: 1; maximum: 200; step-size: 1 ;}
                }

                HorizontalLayout {
                    Text { text: "Sensor Width (mm):" ;}
                    SpinBox { value: root.sensor_width; minimum: 1; maximum: 100; step-size
                        : 0.1 ;}
                }

                HorizontalLayout {
                    Text { text: "Image Width (px):" ;}
                    SpinBox { value: root.image_width; minimum: 100; maximum: 10000; step-size
                        : 10 ;}
                }

                HorizontalLayout {
                    Text { text: "Distance to Target (m):" ;}
                    SpinBox { value: root.distance_to_target; minimum: 0.1; maximum: 100; step-size
                        : 0.1 ;}
                }

                Button {
                    text: "Calculate";
                    clicked => {
                        debug("Calculating UI, Focal length: ", root.focal_length);
                        root.calculate();
                    }
                }
            }
        }

        GroupBox {
            title: "Results";
            VerticalLayout {
                spacing: 8px;
                Text { text: "Pixels per meter: " + root.ppm + " px/m" ;}
                Text { text: "Horizontal FoV: " + root.fov + " degrees" ;}
            }
        }

        Rectangle {
            background: white;
            border-color: #ccc;
            border-width: 1px;
            width: parent.width;
            height: parent.height / 4;
    
            // Draw FoV triangle
            Path {
                fill: #cceeff;
                stroke: #007acc;
                stroke-width: 2px;

                MoveTo {
                    x: root.origin_x;
                    y: root.origin_y;
                }
                LineTo {
                    x: root.left_x;
                    y: root.target_y;
                } 
                LineTo  {
                    x: root.right_x;
                    y: root.target_y;
                }
                Close {

                }

            }
    
            // Draw camera origin as a small filled circle
            Path {
                fill: black;

                MoveTo {
                    x: root.origin_x + 4;
                    y: root.origin_y;
                }
                ArcTo {
                    radius-x: 4; 
                    radius-y: 4; 
                    x: 0;
                    y: 1; 
                }
                ArcTo {
                    radius-x: 4; 
                    radius-y: 4; 
                    x: 0;
                    y: 1; 
                }

            }
    
            // Draw target line
            Path {
                stroke: #00aa00;
                stroke-width: 1px;
                MoveTo {
                    x: root.origin_x;
                    y: root.origin_y;
                } 
                MoveTo {
                    x: root.origin_x;
                    y: root.target_y;
                }
            }
    
            // Optional: annotate
            Text {
                text: "PPM: " + ppm + " px/m";
                font-size: 12px;
                color: #333;
                x: 5px;
                y: 5px;
            }
    
            Text {
                text: "Width: " + (right_x - left_x) + " px";
                font-size: 12px;
                color: #333;
                x: root.origin_x * 1px - 40px;
                y: root.target_y * 1px - 16px;
            }
        }
    }
}